package io.khw.domain.transaction.entity;import lombok.*;import org.springframework.data.annotation.Id;import org.springframework.data.relational.core.mapping.Column;import org.springframework.data.relational.core.mapping.Table;import java.io.Serializable;import java.math.BigDecimal;import java.time.LocalDateTime;@NoArgsConstructor(access = AccessLevel.PROTECTED)@AllArgsConstructor(access = AccessLevel.PRIVATE)@Builder@Getter@Table(name = "transaction")public class TransactionEntity implements Serializable {    @Id    @Column("id")    private Long id;    @Column("stock_id")    private Long stockId;    @Column("volume")    private int volume;    @Column("price")    private BigDecimal price;    @Column("transaction_time")    private LocalDateTime transactionTime;    public TransactionEntity(Long stockId, int volume, BigDecimal price, LocalDateTime transactionTime) {        validateVolume(volume);        validatePrice(price);        validateTransactionTime(transactionTime);        this.stockId = stockId;        this.volume = volume;        this.price = price;        this.transactionTime = transactionTime;    }    private void validateVolume(int volume) {        if (volume <= 0) {            throw new IllegalArgumentException("거래 수량이 0보다 작거나 같을수 없습니다.");        }    }    private void validatePrice(BigDecimal price) {        if (price.compareTo(BigDecimal.ZERO) <= 0) {            throw new IllegalArgumentException("거래 가격이 0보다 작거나 같을수 없습니다.");        }    }    private void validateTransactionTime(LocalDateTime transactionTime) {        if (transactionTime.isAfter(LocalDateTime.now())) {            throw new IllegalArgumentException("거래 시간이 현재보다 미래 일수 없습니다.");        }    }}