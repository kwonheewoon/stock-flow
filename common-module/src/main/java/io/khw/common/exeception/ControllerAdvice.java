package io.khw.common.exeception;import io.khw.common.response.ErrCommonResponse;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.ExceptionHandler;@org.springframework.web.bind.annotation.ControllerAdvicepublic class ControllerAdvice {    /**     * ApiException 예외처리 메소드     *     * @param ex 예외 객체     * @return ResponseEntity<Object> 객체 반환     */    @ExceptionHandler(ApiException.class)    public ResponseEntity<Object> handleApiException(ApiException ex) {        String message = ex.getMessage();        String code = ex.getCode();        return ResponseEntity                .status(ex.getStatus())                .body(new ErrCommonResponse(message, code));    }    /**     * 400 BAD_REQUEST 예외처리 메소드(ex) @RequestParam의 값 미존재시 발생)     *     * @param ex 예외 객체     * @return ResponseEntity<Object> 객체 반환     *///    @ExceptionHandler(MissingServletRequestParameterException.class)//    public ResponseEntity<Object> handleMissingServletRequestParameterException(MissingServletRequestParameterException ex) {//        String message = "Required parameter '" + ex.getParameterName() + "' is missing";////        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(new ErrCommonResponse(message, String.valueOf(HttpStatus.BAD_REQUEST.value())));//    }    /**     * 404 NotFound 예외처리 메소드     *     * @param ex 예외 객체     * @return ResponseEntity<Object> 객체 반환     *///    @ExceptionHandler(NoHandlerFoundException.class)//    @ResponseStatus(HttpStatus.NOT_FOUND)//    public ResponseEntity<Object> NoHandlerFoundException(NoHandlerFoundException ex) {////        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ErrCommonResponse(ex.getMessage(), String.valueOf(HttpStatus.NOT_FOUND.value())));//    }    /**     * RuntimeException 예외처리 메소드     *     * @param ex 예외 객체     * @return ResponseEntity<Object> 객체 반환     */    @ExceptionHandler(RuntimeException.class)    public ResponseEntity<Object> handleRuntimeException(RuntimeException ex) {        String message = ex.getMessage();        HttpStatus status;        if (message.contains("NotFound")) {            status = HttpStatus.NOT_FOUND;        } else if (message.contains("BadRequest")) {            status = HttpStatus.BAD_REQUEST;        } else {            status = HttpStatus.INTERNAL_SERVER_ERROR;        }        return ResponseEntity.status(status).body(new ErrCommonResponse(message, String.valueOf(status.value())));    }}