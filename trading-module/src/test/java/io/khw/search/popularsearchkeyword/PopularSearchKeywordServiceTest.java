package io.khw.search.popularsearchkeyword;import io.khw.domain.popularsearchkeyword.converter.PopularSearchKeywordConverter;import io.khw.domain.popularsearchkeyword.dto.PopularSearchKeywordApiDto;import io.khw.domain.popularsearchkeyword.entity.PopularSearchKeywordEntity;import io.khw.search.popularsearchkeyword.service.PopularSearchKeywordService;import org.junit.jupiter.api.Assertions;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.junit.jupiter.api.extension.ExtendWith;import org.mockito.InjectMocks;import org.mockito.Mock;import org.mockito.junit.jupiter.MockitoExtension;import org.springframework.dao.DataIntegrityViolationException;import org.springframework.transaction.PlatformTransactionManager;import org.springframework.transaction.TransactionDefinition;import org.springframework.transaction.TransactionStatus;import org.springframework.transaction.support.TransactionCallbackWithoutResult;import org.springframework.transaction.support.TransactionTemplate;import java.sql.SQLException;import java.util.List;import java.util.Optional;import static org.assertj.core.api.Assertions.*;import static org.junit.jupiter.api.Assertions.assertThrows;import static org.mockito.Mockito.*;@ExtendWith(MockitoExtension.class)public class PopularSearchKeywordServiceTest {//    @Mock//    private PopularSearchKeywordRepository popularSearchKeywordRepository;////    @Mock//    private PopularSearchKeywordConverter popularSearchKeywordConverter;////    @Mock//    private PlatformTransactionManager transactionManager;////    @Mock//    private TransactionTemplate transactionTemplate;////    @InjectMocks//    private PopularSearchKeywordService popularSearchKeywordService;////    private String searchKeyword;//    private PopularSearchKeywordEntity popularSearchKeywordEntity;//////    @Test//    public void 검색어_저장테스트() {//        // Given//        String searchKeyword = "testKeyword";//        PopularSearchKeywordEntity savedPopularSearchKeywordEntity = PopularSearchKeywordEntity.createPopularSearchKeyWord(searchKeyword, 1);////        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.empty());////        // When//        if(popularSearchKeywordRepository.findByKeyword(searchKeyword).isPresent()){//            popularSearchKeywordRepository.incrementSearchVolumeByKeyword(searchKeyword);//        }else{//            popularSearchKeywordRepository.save(savedPopularSearchKeywordEntity);//        }////        // Then//        verify(popularSearchKeywordRepository, times(1)).save(savedPopularSearchKeywordEntity);//    }////    @Test//    public void 검색어의_검색횟수_증가테스트() {//        // Given//        String searchKeyword = "testKeyword";//        PopularSearchKeywordEntity existingKeyword = PopularSearchKeywordEntity.createPopularSearchKeyWord(searchKeyword, 1);////        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.of(existingKeyword));////        // When//        if(popularSearchKeywordRepository.findByKeyword(searchKeyword).isPresent()){//            popularSearchKeywordRepository.incrementSearchVolumeByKeyword(searchKeyword);//        }////        // Then//        verify(popularSearchKeywordRepository, times(1)).incrementSearchVolumeByKeyword(searchKeyword);//    }////    @Test//    public void 인기검색어_top10_조회테스트() {//        // Given//        List<PopularSearchKeywordEntity> popularSearchKeywords = List.of(//                PopularSearchKeywordEntity.createPopularSearchKeyWord("keyword1", 100),//                PopularSearchKeywordEntity.createPopularSearchKeyWord("keyword2", 90),//                PopularSearchKeywordEntity.createPopularSearchKeyWord("keyword3", 80)//        );////        when(popularSearchKeywordRepository.findTop10ByOrderBySearchVolumeDesc()).thenReturn(popularSearchKeywords);//        when(popularSearchKeywordConverter.convertsToList(popularSearchKeywords)).thenReturn(//                List.of(//                        new PopularSearchKeywordApiDto("keyword1", 100),//                        new PopularSearchKeywordApiDto("keyword2", 90),//                        new PopularSearchKeywordApiDto("keyword3", 80)//                )//        );////        // When//        List<PopularSearchKeywordEntity> searchKeywordEntities = popularSearchKeywordRepository.findTop10ByOrderBySearchVolumeDesc();//        List<PopularSearchKeywordApiDto> topKeywords = popularSearchKeywordConverter.convertsToList(searchKeywordEntities);////        // Then//        assertThat(topKeywords).hasSize(3);//        assertThat(topKeywords.get(0).getKeyword()).isEqualTo("keyword1");//        assertThat(topKeywords.get(0).getSearchVolume()).isEqualTo(100);//    }//    @BeforeEach//    void setUp() {//        searchKeyword = "testKeyword";//        popularSearchKeywordEntity = PopularSearchKeywordEntity.createPopularSearchKeyWord(searchKeyword, 1);//        transactionTemplate = new TransactionTemplate(transactionManager);//        transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);//    }////    @Test//    void 새로운_검색어가_저장되는_경우() {//        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.empty());//        when(transactionTemplate.execute(any(TransactionCallbackWithoutResult.class))).then(invocation -> {//            TransactionCallbackWithoutResult callback = invocation.getArgument(0);//            callback.doInTransaction(mock(TransactionStatus.class));//            return null;//        });////        incrementSearchCount(searchKeyword,transactionManager);////        verify(popularSearchKeywordRepository, times(1)).save(popularSearchKeywordEntity);//        verify(popularSearchKeywordRepository, times(0)).incrementSearchVolumeByKeyword(searchKeyword);//    }////    @Test//    void 기존_검색어의_검색량이_증가하는_경우() {//        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.of(popularSearchKeywordEntity));//        when(transactionTemplate.execute(any(TransactionCallbackWithoutResult.class))).then(invocation -> {//            TransactionCallbackWithoutResult callback = invocation.getArgument(0);//            callback.doInTransaction(mock(TransactionStatus.class));//            return null;//        });////        incrementSearchCount(searchKeyword, transactionManager);////        verify(popularSearchKeywordRepository, times(0)).save(popularSearchKeywordEntity);//        verify(popularSearchKeywordRepository, times(1)).incrementSearchVolumeByKeyword(searchKeyword);//    }////    @Test//    void 최대_시도_횟수를_초과할_때_유니크_키_오류가_발생하는_경우() {//        DataIntegrityViolationException exception = mock(DataIntegrityViolationException.class);//        SQLException sqlException = mock(SQLException.class);//        when(sqlException.getSQLState()).thenReturn("23000");//        when(exception.getRootCause()).thenReturn(sqlException);////        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.of(popularSearchKeywordEntity));//        when(transactionTemplate.execute(any(TransactionCallbackWithoutResult.class))).thenThrow(exception, exception, exception);////        assertThrows(RuntimeException.class, () -> incrementSearchCount(searchKeyword, transactionManager));//    }////    @Test//    void 다른_예외가_발생하는_경우() {//        DataIntegrityViolationException exception = mock(DataIntegrityViolationException.class);//        when(exception.getRootCause()).thenReturn(new RuntimeException());////        when(popularSearchKeywordRepository.findByKeyword(searchKeyword)).thenReturn(Optional.of(popularSearchKeywordEntity));//        when(transactionTemplate.execute(any(TransactionCallbackWithoutResult.class))).thenThrow(exception);////        assertThrows(DataIntegrityViolationException.class, () -> incrementSearchCount(searchKeyword ,transactionManager//        ));//    }////    public void incrementSearchCount(String searchKeyword, PlatformTransactionManager transactionManager) {//        int maxAttempts = 3;//        int currentAttempt = 0;////        TransactionTemplate transactionTemplate = new TransactionTemplate(transactionManager);//        transactionTemplate.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);//////        while (currentAttempt < maxAttempts) {//            currentAttempt++;////            try {//                transactionTemplate.execute(new TransactionCallbackWithoutResult() {//                    @Override//                    protected void doInTransactionWithoutResult(TransactionStatus status) {//                        Optional<PopularSearchKeywordEntity> findPopularSearchKeyword = popularSearchKeywordRepository.findByKeyword(searchKeyword);//                        PopularSearchKeywordEntity popularSearchKeyword;////                        if (!findPopularSearchKeyword.isPresent()) {//                            popularSearchKeyword = PopularSearchKeywordEntity.createPopularSearchKeyWord(searchKeyword, 1);//                            popularSearchKeywordRepository.save(popularSearchKeyword);//                        } else {//                            popularSearchKeywordRepository.incrementSearchVolumeByKeyword(searchKeyword);//                        }//                    }//                });//                break; // 성공적으로 저장되면 루프를 빠져나옵니다.//            } catch (DataIntegrityViolationException e) {//                if (e.getRootCause() instanceof SQLException &&//                        ((SQLException) e.getRootCause()).getSQLState().startsWith("23")) {//                    // 유니크 키 에러가 발생한 경우//                    if (currentAttempt >= maxAttempts) {//                        throw new RuntimeException("Maximum attempts exceeded for incrementing search count", e);//                    }//                    // 루프를 계속하고 다시 시도합니다.//                } else {//                    // 다른 에러는 전파//                    throw e;//                }//            }//        }//    }}