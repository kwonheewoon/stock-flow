package io.khw.search.blogsearch.service;import io.khw.common.exeception.ApiException;import io.khw.domain.blogsearch.dto.*;import io.khw.domain.blogsearch.vo.SearchVo;import io.khw.search.common.config.PropertiesTestConfig;import lombok.extern.slf4j.Slf4j;import okhttp3.mockwebserver.MockResponse;import okhttp3.mockwebserver.MockWebServer;import okhttp3.mockwebserver.SocketPolicy;import org.junit.jupiter.api.*;import org.springframework.http.HttpStatus;import org.springframework.web.reactive.function.client.ClientResponse;import org.springframework.web.reactive.function.client.WebClient;import org.springframework.web.reactive.function.client.WebClientRequestException;import org.springframework.web.util.UriComponentsBuilder;import reactor.core.publisher.Mono;import reactor.test.StepVerifier;import reactor.util.retry.Retry;import java.io.IOException;import java.net.URI;import java.time.Duration;import java.util.Map;import java.util.function.Function;import static org.junit.jupiter.api.Assertions.*;@Slf4jpublic class BlogSearchServiceTest {    private MockWebServer kakaoMockWebServer;    private MockWebServer naverMockWebServer;    private WebClient.Builder webClientBuilder;    private WebClient.Builder webClientBuilderSecond;    private PropertiesTestConfig propertiesConfig = new PropertiesTestConfig();    @BeforeEach    public void setUp() throws IOException {        kakaoMockWebServer = new MockWebServer();        kakaoMockWebServer.start();        naverMockWebServer = new MockWebServer();        naverMockWebServer.start();        propertiesConfig.getKakao().setUrl(String.format("http://localhost:%s", kakaoMockWebServer.getPort()));        propertiesConfig.getNaver().setUrl(String.format("http://localhost:%s", naverMockWebServer.getPort()));        webClientBuilder = WebClient.builder().baseUrl(String.format("http://localhost:%s", kakaoMockWebServer.getPort()));        webClientBuilderSecond = WebClient.builder().baseUrl(String.format("http://localhost:%s", naverMockWebServer.getPort()));    }    @AfterEach    void tearDown() throws IOException {        kakaoMockWebServer.shutdown();        naverMockWebServer.shutdown();    }    @Nested    @DisplayName("블로그 검색 API 테스트")    class SUCESS_API_TETS{        SearchVo searchVo = new SearchVo("검색쿼리", "recency", 1, 10);        String responseBody = "{\n" +                "    \"documents\": [\n" +                "        {\n" +                "            \"contents\": \"플레쳐에 관한 연구 / 하도균 Page:253 신학교육의 모델들 / 손원영 Page:277 창조와 타락 이야기(창2-<b>3</b>장)에 나타난 신의 교육학 / 이미경 Page:311 십자가의 성 요한의 영적 성장에 대한 이해 / 유재경 Page...\",\n" +                "            \"datetime\": \"2023-03-18T14:43:35.000+09:00\",\n" +                "            \"title\": \"\",\n" +                "            \"url\": \"http://lib.bpu.ac.kr/BPTCS/Search/SearchReportS.csp?HLOC=BPTCS&Kor=1&COUNT=31ja7qDr00&LOC=BPTCS&FILENUM=6611&DATA=A0&Data1=&Data2=&Data3=&Data4=\"\n" +                "        },\n" +                "       {\n" +                "            \"blogname\": \"nuna의정보바다\",\n" +                "            \"contents\": \"되며, 전송량이 적고 통신 회선의 용량이 작은 경우에 사용한다. 반 이중 통신방식을 적용하는 장치로는 무전기, PC 통신 등이 해당되고, 전화와 자료 <b>검</b> 색 및 멀티미디어 회화 서비스 등에 이용될 수 있으며, 수신측에서 전송 오류를 검출 하면 송신측에 재전송을 요청할 수 있다. 전이중 통신방식은 양 쪽 방향으로...\",\n" +                "            \"datetime\": \"2023-03-19T15:18:41.000+09:00\",\n" +                "            \"thumbnail\": \"https://search4.kakaocdn.net/argon/130x130_85_c/GzCEISulBzV\",\n" +                "            \"title\": \"정보통신공학과 통신학과, 정보처리기사 등 정보통신시스템 요약정리 6. 데이터 전달방식\",\n" +                "            \"url\": \"http://kona.tistory.com/1188\"\n" +                "        }" +                "    ],\n" +                "    \"meta\": {\n" +                "        \"is_end\": false,\n" +                "        \"pageable_count\": 585,\n" +                "        \"total_count\": 456583159\n" +                "    }\n" +                "}";        String naverResponseBody = "{\n" +                "    \"lastBuildDate\": \"Sun, 19 Mar 2023 01:32:54 +0900\",\n" +                "    \"total\": 6142635,\n" +                "    \"start\": 5,\n" +                "    \"display\": 1,\n" +                "    \"items\": [\n" +                "        {\n" +                "            \"title\": \"더 글로리 파트 2 리뷰 (스포 <b>ㅇ</b>)\",\n" +                "            \"link\": \"https://blog.naver.com/wlsdnwngk/223041655207\",\n" +                "            \"description\": \"오늘은 더 글로리 파트 2 리뷰 (스포 <b>ㅇ</b>) 리뷰해요. 더 글로리 파트 2 전개 복수를 위해서 달려가는 문동은 처음에는 복수를 하려는 박연진 무리에게 경고와 협박을 하지만 파트 1에서 복수라고 보이는 부분은... \",\n" +                "            \"bloggername\": \"생활과 여행 정보\",\n" +                "            \"bloggerlink\": \"blog.naver.com/wlsdnwngk\",\n" +                "            \"postdate\": \"20230311\"\n" +                "        },\n" +                "        {\n" +                "            \"title\": \"하림 닭고기 저지방햄 <b>챔</b>으로 만드는 치팅데이 식단(햄... \",\n" +                "            \"link\": \"https://blog.naver.com/jhpark422/223040395170\",\n" +                "            \"description\": \"아무리 치팅 데이라고 하여도 전부 내려놓고 먹기에는 부담이 될 수 밖에 없기에 고민이 되었습니다ㅠㅠㅠㅠ 그래서 하림 저지방 햄 <b>챔</b>으로 요리를 해보려고 합니다. 우선 '<b>챔</b>'은 돼지고기 햄이 아닌 닭고기... \",\n" +                "            \"bloggername\": \"자라나는 콩나물\",\n" +                "            \"bloggerlink\": \"blog.naver.com/jhpark422\",\n" +                "            \"postdate\": \"20230310\"\n" +                "        }\n" +                "    ]\n" +                "}";        @Test        public void 카카오_API_호출_테스트_기본_API_서버가_정상일시() {            // given            kakaoMockWebServer.enqueue(new MockResponse().setBody(responseBody).setHeader("Content-Type", "application/json"));            WebClient kakaoWebClient = webClientBuilder.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon);            // then            StepVerifier.create(result)                    .assertNext(commonApiResponse -> {                        assertNotNull(commonApiResponse);                        assertNotNull(commonApiResponse.documents());                        assertFalse(commonApiResponse.documents().isEmpty());                        assertTrue(commonApiResponse.documents().size() == 2);                        assertTrue(commonApiResponse.totalCount() == 456583159);                        CommonDocumentDto document = commonApiResponse.documents().get(1);                        assertTrue(document.title().contains("정보통신공학과 통신학과, 정보처리기사"));                        assertEquals(document.url(),"http://kona.tistory.com/1188");                        assertEquals(document.thumbnail(), "https://search4.kakaocdn.net/argon/130x130_85_c/GzCEISulBzV");                        assertEquals(document.blogName(), "nuna의정보바다");                    })                    .verifyComplete();        }        @Test        public void 네이버_API_호출_테스트_기본_API_서버가_정상일시() {            // given            naverMockWebServer.enqueue(new MockResponse().setBody(naverResponseBody).setHeader("Content-Type", "application/json"));            WebClient naverWebClient = webClientBuilder.build();            // when            var result = getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);            // then            StepVerifier.create(result)                    .assertNext(commonApiResponse -> {                        assertNotNull(commonApiResponse);                        assertNotNull(commonApiResponse.documents());                        assertFalse(commonApiResponse.documents().isEmpty());                        assertTrue(commonApiResponse.documents().size() == 2);                        assertTrue(commonApiResponse.totalCount() == 6142635);                        CommonDocumentDto document = commonApiResponse.documents().get(0);                        assertTrue(document.title().contains("더 글로리 파트 2 리뷰"));                        assertTrue(document.url().contains("https://blog.naver.com/wlsdnwngk/2230416"));                        assertEquals(document.thumbnail(), "blog.naver.com/wlsdnwngk");                        assertEquals(document.blogName(), "생활과 여행 정보");                    })                    .verifyComplete();        }        @Test        public void 첫번째_API_400에러() {            // given            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(400));            naverMockWebServer.enqueue(new MockResponse().setBody(naverResponseBody).setHeader("Content-Type", "application/json"));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilder.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .onErrorResume(e -> {                        if (e instanceof ApiException && ((ApiException) e).getStatus().is5xxServerError()) {                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        } else {                            return Mono.error(e);                        }                    });;            // then            StepVerifier.create(result)                    .expectError(ApiException.class)                    .verify(Duration.ofSeconds(5));        }        @Test        public void 첫번째_API_404에러() {            // given            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(404));            naverMockWebServer.enqueue(new MockResponse().setBody(naverResponseBody).setHeader("Content-Type", "application/json"));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilder.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .onErrorResume(e -> {                        if (e instanceof ApiException && ((ApiException) e).getStatus().is5xxServerError()) {                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        } else {                            return Mono.error(e);                        }                    });            // then            StepVerifier.create(result)                    .expectError(ApiException.class)                    .verify(Duration.ofSeconds(5));        }        @Test        public void 첫번째_API_404에러_두번째_API_404에러() {            // given            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(404));            naverMockWebServer.enqueue(new MockResponse().setResponseCode(404));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilder.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .onErrorResume(e -> {                        if (e instanceof ApiException && ((ApiException) e).getStatus().is5xxServerError()) {                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        } else {                            return Mono.error(e);                        }                    });            // then            StepVerifier.create(result)                    .expectError(ApiException.class)                    .verify(Duration.ofSeconds(5));        }        @Test        public void 첫번째_API_500에러_두번째_API_호출성공() {            // given            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(500));            naverMockWebServer.enqueue(new MockResponse().setBody(naverResponseBody).setHeader("Content-Type", "application/json"));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilder.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .onErrorResume(e -> handleErrorResume(e, naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon));            // then            StepVerifier.create(result)                    .expectNextMatches(response -> response.documents().get(0).title().contains("더 글로리 파트 2 리뷰") &&                            response.documents().get(0).url().contains("https://blog.naver.com/wlsdnwngk/2230416") &&                            response.totalCount() == 6142635)                    .verifyComplete();        }        @Test        public void 첫번째_API_500에러_두번째_API_500에러() {            // given            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(500));            naverMockWebServer.enqueue(new MockResponse().setResponseCode(500));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilder.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .onErrorResume(e -> {                        if (e instanceof ApiException && ((ApiException) e).getStatus().is5xxServerError()) {                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        } else {                            return Mono.error(e);                        }                    });;            // then            StepVerifier.create(result)                    .expectError(ApiException.class)                    .verify(Duration.ofSeconds(5));        }        @Test        public void 첫번째_API_Connection에러_두번째_API_호출성공() throws IOException {            // given            kakaoMockWebServer.enqueue(new MockResponse().setBody(responseBody).setHeader("Content-Type", "application/json"));            naverMockWebServer.enqueue(new MockResponse().setBody(naverResponseBody).setHeader("Content-Type", "application/json"));            kakaoMockWebServer.shutdown();            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilderSecond.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .onErrorResume(e -> {                        if (e instanceof ApiException && ((ApiException) e).getStatus().is5xxServerError()) {                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        }                        else if(e instanceof WebClientRequestException && e.getCause().getMessage().contains("Connection refused")){                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        }                        else {                            return Mono.error(e);                        }                    });;            // then            StepVerifier.create(result)                    .assertNext(commonApiResponse -> {                        assertNotNull(commonApiResponse);                        assertNotNull(commonApiResponse.documents());                        assertFalse(commonApiResponse.documents().isEmpty());                        assertTrue(commonApiResponse.totalCount() == 6142635);                        CommonDocumentDto document = commonApiResponse.documents().get(0);                        assertTrue(document.title().contains("더 글로리 파트 2 리뷰"));                        assertTrue(document.url().contains("https://blog.naver.com/wlsdnwngk/2230416"));                    })                    .verifyComplete();        }        @Test        public void 첫번째_API_Connection에러_두번째_API_Connection에러() throws IOException {            // given            kakaoMockWebServer.enqueue(new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START));            naverMockWebServer.enqueue(new MockResponse().setBody(responseBody));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilderSecond.build();            kakaoMockWebServer.shutdown();            naverMockWebServer.shutdown();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .onErrorResume(e -> {                        if (e instanceof ApiException && ((ApiException) e).getStatus().is5xxServerError()) {                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        }                        else if(e instanceof WebClientRequestException && e.getCause().getMessage().contains("Connection refused")){                            return getCallExchangeApi(naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon);                        }                        else {                            return Mono.error(e);                        }                    });            // then            StepVerifier.create(result)                    .expectErrorMatches(throwable -> throwable.getMessage().contains("Connection refused"))                    .verify(Duration.ofSeconds(5));        }        @Test        public void 첫번째_API_재시도_3회_실패_두번째_API_호출성공() throws IOException {            // given            kakaoMockWebServer.shutdown();            naverMockWebServer.enqueue(new MockResponse().setBody(naverResponseBody).setHeader("Content-Type", "application/json"));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilderSecond.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .retryWhen(handleRetry(2,2))                    .onErrorResume(e -> handleErrorResume(e, naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon));            // then            StepVerifier.create(result)                    .assertNext(commonApiResponse -> {                        assertNotNull(commonApiResponse);                        assertNotNull(commonApiResponse.documents());                        assertFalse(commonApiResponse.documents().isEmpty());                        assertTrue(commonApiResponse.totalCount() == 6142635);                        CommonDocumentDto document = commonApiResponse.documents().get(0);                        assertTrue(document.title().contains("더 글로리 파트 2 리뷰"));                        assertTrue(document.url().contains("https://blog.naver.com/wlsdnwngk/2230416"));                    })                    .verifyComplete();        }        @Test        public void 첫번째_API_재시도_3회_실패_두번째_API_재시도_3회_실패() throws IOException {            // given            kakaoMockWebServer.shutdown();            naverMockWebServer.shutdown();            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilderSecond.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getKakao().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .retryWhen(handleRetry(2,2))                    .onErrorResume(e -> handleErrorResume(e, naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getNaver().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon));            //then            StepVerifier.create(result)                    //.expectError(ApiException.class)                    .expectErrorMatches(throwable -> throwable.getMessage().contains("Connection refused"))                    .verify(Duration.ofSeconds(30));        }        @Test        public void UriComponentsBuilder를_추가하여_파라미터를_동적으로_보내_callExchangeApiWithUriBuilder_메소드_추상화() {            // given            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(500));            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(500));            kakaoMockWebServer.enqueue(new MockResponse().setResponseCode(500));            naverMockWebServer.enqueue(new MockResponse().setBody(naverResponseBody).setHeader("Content-Type", "application/json"));            WebClient kakaoWebClient = webClientBuilder.build();            WebClient naverWebClient = webClientBuilderSecond.build();            // when            var result = getCallExchangeApi(kakaoWebClient, buildApiUri(propertiesConfig.getKakao(), searchVo), propertiesConfig.getNaver().getHeaders(), ApiResponseDto.class, ApiResponseDto::toCommon)                    .retryWhen(handleRetry(2,2))                    .onErrorResume(e -> handleErrorResume(e, naverWebClient, buildApiUri(propertiesConfig.getNaver(), searchVo), propertiesConfig.getKakao().getHeaders(), AnotherApiResponseDto.class, AnotherApiResponseDto::toCommon))                    .retryWhen(handleRetry(2,2));            //then            StepVerifier.create(result)                    .assertNext(commonApiResponse -> {                        assertNotNull(commonApiResponse);                        assertNotNull(commonApiResponse.documents());                        assertFalse(commonApiResponse.documents().isEmpty());                        assertTrue(commonApiResponse.documents().size() == 2);                        assertTrue(commonApiResponse.totalCount() == 6142635);                        CommonDocumentDto document = commonApiResponse.documents().get(0);                        assertTrue(document.title().contains("더 글로리 파트 2 리뷰"));                        assertTrue(document.url().contains("https://blog.naver.com/wlsdnwngk/2230416"));                        assertEquals(document.thumbnail(), "blog.naver.com/wlsdnwngk");                        assertEquals(document.blogName(), "생활과 여행 정보");                    })                    .verifyComplete();        }    }    private Retry handleRetry(int maxAttempts, int seconds) {        return Retry.fixedDelay(maxAttempts, Duration.ofSeconds(seconds))                .filter(throwable -> (throwable instanceof ApiException &&                        ((ApiException) throwable).getStatus().is5xxServerError()) ||                        (throwable instanceof WebClientRequestException && throwable.getCause().getMessage().contains("Connection refused")))                .onRetryExhaustedThrow((retryBackoffSpec, retrySignal) -> {                    log.info("{} : Retries exhausted, handling in onRetryExhaustedThrow");                    return new ApiException(HttpStatus.INTERNAL_SERVER_ERROR);                });    }    private <T, R> Mono<R> handleErrorResume(Throwable e, WebClient webClient, URI uri, Map<String, String> headers, Class<T> responseType, Function<T, R> converter) {        boolean shouldRetry = (e instanceof ApiException && ((ApiException) e).getStatus().is5xxServerError()) ||                (e instanceof WebClientRequestException && e.getCause().getMessage().contains("Connection refused"));        if (shouldRetry) {            return getCallExchangeApi(webClient, uri, headers, responseType, converter);        } else {            return Mono.error(e);        }    }    private <T> Mono<T> handleClientResponse(ClientResponse clientResponse, Class<T> responseType) {        HttpStatus status = (HttpStatus) clientResponse.statusCode();        if (status.equals(HttpStatus.OK)) {            return clientResponse.bodyToMono(responseType);        } else {            return Mono.error(new ApiException(status));        }    }    public <T,R> Mono<R> getCallExchangeApi(WebClient webClient, URI uri, Map<String, String> headers, Class<T> responseType, Function<T, R> converter) {        WebClient.RequestHeadersSpec<?> requestHeadersSpec = webClient.get()                .uri(uri);        headers.forEach(requestHeadersSpec::header);        return requestHeadersSpec                .exchangeToMono(clientResponse -> handleClientResponse(clientResponse, responseType))                .map(converter);    }    public URI buildApiUri(PropertiesTestConfig.ApiProperties properties, SearchVo searchVo) {        return UriComponentsBuilder.fromHttpUrl(properties.getUrl())                .path(properties.getPath())                .queryParam(properties.getQueryParamKey(), searchVo.query())                .queryParam(properties.getSortParamKey(), searchVo.sort())                .queryParam(properties.getPageParamKey(), searchVo.page())                .queryParam(properties.getSizeParamKey(), searchVo.size())                .encode()                .build().toUri();    }}