package io.khw.trading.repositorytest;import io.khw.TradingModuleApplication;import io.khw.domain.transaction.repository.TransactionRepository;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpHeaders;import org.springframework.http.MediaType;import org.springframework.test.context.ActiveProfiles;import org.springframework.test.web.reactive.server.WebTestClient;import org.springframework.web.reactive.function.client.WebClient;@SpringBootTest(classes = TradingModuleApplication.class,webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)@ActiveProfiles("local")public class 네이버_블로그검색API_Test {    @Autowired    private TransactionRepository transactionRepository;    private WebTestClient webTestClient;    private WebClient webClient;    @BeforeEach    void setUp() {        webTestClient = WebTestClient.bindToServer().baseUrl("https://openapi.naver.com").build();    }    @Test    public void 카카오_블로그_검색API_테스트() {        long startTime = System.currentTimeMillis();        HttpHeaders headers = new HttpHeaders();        headers.add("X-Naver-Client-Id", "4IQLhnpiRAj5PimRdsQO");        headers.add("X-Naver-Client-Secret", "yT1r3tQLQf");        // HTTP GET 요청 보내기        webTestClient.get()                .uri(uriBuilder -> uriBuilder                        .path("/v1/search/blog.json")                        .queryParam("query", "sdfsdf")                        .queryParam("sort", "sim")                        .queryParam("start", 1)                        .queryParam("display", 10)                        .build())                .headers(h -> h.addAll(headers))                .accept(MediaType.APPLICATION_JSON)                .exchange()                .expectStatus().isOk()                .expectHeader().contentType(MediaType.APPLICATION_JSON_UTF8)                .expectBody()                .jsonPath("$.lastBuildDate").isNotEmpty()                .jsonPath("$.total").isNumber()                .jsonPath("$.start").isNumber()                .jsonPath("$.display").isNumber()                .jsonPath("$.items").isArray()                .jsonPath("$.items[0].title").isNotEmpty()                .jsonPath("$.items[0].link").isNotEmpty()                .jsonPath("$.items[0].description").isNotEmpty()                .jsonPath("$.items[0].bloggername").isNotEmpty()                .jsonPath("$.items[0].bloggerlink").isNotEmpty()                .jsonPath("$.items[0].postdate").isNotEmpty();        long elapsedTime = System.currentTimeMillis() - startTime;        System.out.println("Elapsed time: " + elapsedTime + "ms");    }    @Test    public void 카카오_블로그_검색API_에러메시지_반환_테스트() {        long startTime = System.currentTimeMillis();        HttpHeaders headers = new HttpHeaders();        headers.add("X-Naver-Client-Id", "4IQLhnpiRAj5PimRdsQO");        headers.add("X-Naver-Client-Secret", "yT1r3tQLQf");        // HTTP GET 요청 보내기        webTestClient.get()                .uri(uriBuilder -> uriBuilder                        .path("/v1/search/blog.json")                        .queryParam("query", "")                        .queryParam("sort", "sim")                        .queryParam("start", 1)                        .queryParam("display", 10)                        .build())                .headers(h -> h.addAll(headers))                .accept(MediaType.APPLICATION_JSON)                .exchange()                .expectStatus().isBadRequest()                .expectHeader().contentType(MediaType.APPLICATION_JSON_UTF8)                .expectBody()                .jsonPath("$.errorMessage").isEqualTo("Incorrect query request (잘못된 쿼리요청입니다.)")                .jsonPath("$.errorCode").isEqualTo("SE01");        long elapsedTime = System.currentTimeMillis() - startTime;        System.out.println("Elapsed time: " + elapsedTime + "ms");    }}