package io.khw.search.common;import io.khw.common.exeception.ApiException;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.http.HttpStatus;import org.springframework.stereotype.Component;import org.springframework.web.reactive.function.client.ClientResponse;import org.springframework.web.reactive.function.client.WebClient;import org.springframework.web.reactive.function.client.WebClientRequestException;import reactor.core.publisher.Mono;import reactor.util.retry.Retry;import java.net.URI;import java.time.Duration;import java.util.Map;import java.util.function.Function;@Componentpublic class WebClientCallManager {    private static Logger logger = LoggerFactory.getLogger(WebClientCallManager.class);    /**     * WebClient Retry 객체 생성 메소드     *     * 1.ApiException이 발생하고 해당 ApiException의 상태 코드가 5xx 서버 오류인 경우 재시도     * 2.WebClientRequestException이 발생하고 원인 메시지에 "Connection refused"가 포함되어 있는 경우 재시도     * 3.onRetryExhaustedThrow를 사용하여 모든 재시도가 소진된 경우 INTERNAL_SERVER_ERROR 예외 정의     *     * @param maxAttempts 재시도 횟수     * @param seconds 대기 시간(초당)     * @return Retry 객체     */    public Retry handleRetry(int maxAttempts, int seconds) {        //파라미터로 넘어온 재시도 횟수, 대기 시간만큼의 재시도 정보를 가진 Retry 객체 생성        return Retry.fixedDelay(maxAttempts, Duration.ofSeconds(seconds))                .filter(throwable -> (throwable instanceof ApiException &&                        ((ApiException) throwable).getStatus().is5xxServerError()) ||                        (throwable instanceof WebClientRequestException && throwable.getCause().getMessage().contains("Connection refused")))                .onRetryExhaustedThrow((retryBackoffSpec, retrySignal) -> {                    logger.error("Retries exhausted, handling in onRetryExhaustedThrow");                    return new ApiException(HttpStatus.INTERNAL_SERVER_ERROR);                });    }    /**     * WebClient를 사용하여 HTTP 호출에서 발생한 오류 처리 메소드     *     * 1.ApiException 예외 발생 및 상태코드가 5xx 서버 오류인 경우 API 호출 재시도     * 2.재시도가 필요하지 않은 경우(5xx 이외의 에러) Mono.error로 감싸서 변환     *     * @param throwable 예외 객체     * @param webClient WebClient 인스턴스     * @param uri HTTP 호출 uri     * @param headers HTTP 호출 헤더     * @param responseType 응답 객체유형<제네릭 메소드>     * @param converter 응답 객체를 변환하는 Function 함수형 인터페이스     * @return Mono<R> 객체     */    public  <T, R> Mono<R> handleErrorResume(Throwable throwable, WebClient webClient, URI uri, Map<String, String> headers, Class<T> responseType, Function<T, R> converter) {        boolean shouldRetry = (throwable instanceof ApiException && ((ApiException) throwable).getStatus().is5xxServerError()) ||                (throwable instanceof WebClientRequestException && throwable.getCause().getMessage().contains("Connection refused"));        if (shouldRetry) {            return getCallExchangeApi(webClient, uri, headers, responseType, converter);        } else {            return Mono.error(throwable);        }    }    /**     * WebClient를 사용하여 HTTP 호출의 응답을 처리하는 handleClientResponse 메소드     *     * 1.HttpStatus 객체를 사용해 응답의 상태 코드를 가져온다.     * 2.상태코드가 200 OK인 경우 Mono 타입으로 변환후 반환     * 3.상태코드가 200 OK가 아닌 경우 ApiException를 생성하고 Apiexception 발생     *     * @param clientResponse WebClient에서 반환된 ClientResponse 객체와 응답 유형 클래스     * @param responseType 응답 객체유형<제네릭 메소드>     * @return Mono<R> 객체     */    private <T> Mono<T> handleClientResponse(ClientResponse clientResponse, Class<T> responseType) {        HttpStatus status = (HttpStatus) clientResponse.statusCode();        if (status.equals(HttpStatus.OK)) {            return clientResponse.bodyToMono(responseType);        } else {            logger.error("handleClientResponse error : {}", clientResponse);            return Mono.error(new ApiException(status));        }    }    /**     * WebClient를 사용하여 API 호출을 수행하고 결과를 반환하는 메소드     *     * 1.WebClient의 get() 메소드를 호출하여 요청을 시작하고, 주어진 URI로 요청을 설     * 2.exchangeToMono 메소드를 호출하여 요청을 전송하고, ClientResponse를 Mono로 변환합니다. 이때, 이전에 정의한 handleClientResponse 메소드를 사용하여 응답 처리를 수행     * 3.map을 사용하여 응답 객체를 변환 함수를 통해 결과 유형 R로 변환합니다.     *     * @param webClient Webclient 인스턴스     * @param uri HTTP 호출 uri     * @param headers HTTP 호출 헤더     * @param responseType 응답 객체유형<제네릭 메소드>     * @param converter 응답 객체를 변환하는 Function 함수형 인터페이스     * @return Mono<R> 객체     */    public  <T,R> Mono<R> getCallExchangeApi(WebClient webClient, URI uri, Map<String, String> headers, Class<T> responseType, Function<T, R> converter) {        WebClient.RequestHeadersSpec<?> requestHeadersSpec = webClient.get()                .uri(uri);        headers.forEach(requestHeadersSpec::header);        return requestHeadersSpec                .exchangeToMono(clientResponse -> handleClientResponse(clientResponse, responseType))                .map(converter);    }}